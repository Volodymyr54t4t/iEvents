const TelegramBot = require("node-telegram-bot-api")
const pool = require("../db/pool")

let bot = null

// Initialize Telegram bot
const initTelegramBot = () => {
    const token = process.env.TELEGRAM_BOT_TOKEN

    if (!token) {
        console.warn("‚ö†Ô∏è  TELEGRAM_BOT_TOKEN not set. Telegram notifications will be disabled.")
        return null
    }

    try {
        bot = new TelegramBot(token, {
            polling: true
        })

        // Handle /start command
        bot.onText(/\/start/, async (msg) => {
            const chatId = msg.chat.id
            const telegramUsername = msg.from.username || msg.from.first_name

            bot.sendMessage(
                chatId,
                `–í—ñ—Ç–∞—î–º–æ —É —Å–∏—Å—Ç–µ–º—ñ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ–Ω–∫—É—Ä—Å–∞–º–∏!\n\n` +
                `–í–∞—à Telegram ID: ${chatId}\n` +
                `–î–æ–¥–∞–π—Ç–µ —Ü–µ–π ID –¥–æ —Å–≤–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é –Ω–∞ —Å–∞–π—Ç—ñ, —â–æ–± –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è.`,
            )
        })

        // Handle /link command to link account
        bot.onText(/\/link (.+)/, async (msg, match) => {
            const chatId = msg.chat.id
            const email = match[1]

            try {
                const client = await pool.connect()

                // Find user by email
                const result = await client.query(`SELECT id, name, email FROM users WHERE email = $1`, [email])

                if (result.rows.length === 0) {
                    bot.sendMessage(chatId, `–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ email ${email} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.`)
                    client.release()
                    return
                }

                const user = result.rows[0]

                // Update user's telegram_id
                await client.query(`UPDATE users SET telegram_id = $1 WHERE id = $2`, [chatId.toString(), user.id])

                bot.sendMessage(
                    chatId,
                    `–£—Å–ø—ñ—à–Ω–æ! –í–∞—à –∞–∫–∞—É–Ω—Ç ${user.name} (${user.email}) —Ç–µ–ø–µ—Ä –∑–≤'—è–∑–∞–Ω–æ –∑ Telegram.\n\n` +
                    `–í–∏ –±—É–¥–µ—Ç–µ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –∫–æ–Ω–∫—É—Ä—Å–∏ —Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏.`,
                )

                client.release()
            } catch (error) {
                console.error("Link account error:", error)
                bot.sendMessage(chatId, "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–≤'—è–∑—É–≤–∞–Ω–Ω—ñ –∞–∫–∞—É–Ω—Ç—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
            }
        })

        // Handle /unlink command
        bot.onText(/\/unlink/, async (msg) => {
            const chatId = msg.chat.id

            try {
                const client = await pool.connect()

                const result = await client.query(`UPDATE users SET telegram_id = NULL WHERE telegram_id = $1 RETURNING *`, [
                    chatId.toString(),
                ])

                if (result.rows.length === 0) {
                    bot.sendMessage(chatId, "–í–∞—à –∞–∫–∞—É–Ω—Ç –Ω–µ –±—É–≤ –∑–≤'—è–∑–∞–Ω–∏–π –∑ Telegram.")
                } else {
                    bot.sendMessage(chatId, "–í–∞—à –∞–∫–∞—É–Ω—Ç —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–≤'—è–∑–∞–Ω–æ –≤—ñ–¥ Telegram.")
                }

                client.release()
            } catch (error) {
                console.error("Unlink account error:", error)
                bot.sendMessage(chatId, "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–≤'—è–∑—É–≤–∞–Ω–Ω—ñ –∞–∫–∞—É–Ω—Ç—É.")
            }
        })

        // Handle /help command
        bot.onText(/\/help/, (msg) => {
            const chatId = msg.chat.id

            bot.sendMessage(
                chatId,
                `–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n\n` +
                `/start - –ü–æ—á–∞—Ç–æ–∫ —Ä–æ–±–æ—Ç–∏ –∑ –±–æ—Ç–æ–º\n` +
                `/link <email> - –ó–≤'—è–∑–∞—Ç–∏ –∞–∫–∞—É–Ω—Ç –∑ Telegram\n` +
                `/unlink - –í—ñ–¥–≤'—è–∑–∞—Ç–∏ –∞–∫–∞—É–Ω—Ç –≤—ñ–¥ Telegram\n` +
                `/help - –ü–æ–∫–∞–∑–∞—Ç–∏ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è`,
            )
        })

        console.log("‚úÖ Telegram bot initialized successfully")
        return bot
    } catch (error) {
        console.error("‚ùå Failed to initialize Telegram bot:", error)
        return null
    }
}

// Send notification to user via Telegram
const sendTelegramNotification = async (userId, message) => {
    if (!bot) {
        console.log("Telegram bot not initialized. Skipping notification.")
        return false
    }

    try {
        const client = await pool.connect()

        // Get user's telegram_id
        const result = await client.query(`SELECT telegram_id FROM users WHERE id = $1`, [userId])

        client.release()

        if (result.rows.length === 0 || !result.rows[0].telegram_id) {
            console.log(`User ${userId} does not have Telegram linked`)
            return false
        }

        const telegramId = result.rows[0].telegram_id

        // Send message
        await bot.sendMessage(telegramId, message)
        console.log(`‚úÖ Telegram notification sent to user ${userId}`)
        return true
    } catch (error) {
        console.error("Error sending Telegram notification:", error)
        return false
    }
}

// Send notification to multiple users
const sendBulkTelegramNotifications = async (userIds, message) => {
    if (!bot) {
        console.log("Telegram bot not initialized. Skipping notifications.")
        return
    }

    const results = await Promise.allSettled(userIds.map((userId) => sendTelegramNotification(userId, message)))

    const successful = results.filter((r) => r.status === "fulfilled" && r.value === true).length

    console.log(`Sent ${successful}/${userIds.length} Telegram notifications`)
}

// Send notification about new contest
const notifyNewContest = async (contestTitle) => {
    if (!bot) return

    try {
        const client = await pool.connect()

        // Get all teachers with Telegram linked
        const result = await client.query(
            `SELECT id, telegram_id FROM users WHERE role = 'teacher' AND telegram_id IS NOT NULL`,
        )

        client.release()

        const message = `üéØ –ù–æ–≤–∏–π –∫–æ–Ω–∫—É—Ä—Å —Å—Ç–≤–æ—Ä–µ–Ω–æ!\n\nüìù ${contestTitle}\n\n–ü–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ –¥–µ—Ç–∞–ª—ñ –Ω–∞ —Å–∞–π—Ç—ñ —Ç–∞ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ —Å–≤–æ—ó—Ö —É—á–Ω—ñ–≤.`

        for (const user of result.rows) {
            try {
                await bot.sendMessage(user.telegram_id, message)
            } catch (error) {
                console.error(`Failed to send to user ${user.id}:`, error.message)
            }
        }
    } catch (error) {
        console.error("Error notifying about new contest:", error)
    }
}

// Send notification about participation approval
const notifyParticipationApproval = async (studentId, contestTitle, approved) => {
    if (!bot) return

    const message = approved ?
        `‚úÖ –í–∞—à—É —É—á–∞—Å—Ç—å –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ!\n\nüéØ –ö–æ–Ω–∫—É—Ä—Å: ${contestTitle}\n\n–£–¥–∞—á—ñ!` :
        `‚ùå –í–∞—à—É –∑–∞—è–≤–∫—É –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ\n\nüéØ –ö–æ–Ω–∫—É—Ä—Å: ${contestTitle}\n\n–ó–≤'—è–∂—ñ—Ç—å—Å—è –∑ –≤–∞—à–∏–º –≤—á–∏—Ç–µ–ª–µ–º –¥–ª—è –¥–µ—Ç–∞–ª–µ–π.`

    await sendTelegramNotification(studentId, message)
}

// Send notification about new result
const notifyNewResult = async (studentId, contestTitle, score, rank) => {
    if (!bot) return

    let message = `üìä –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–Ω–æ–≤–ª–µ–Ω–æ!\n\nüéØ –ö–æ–Ω–∫—É—Ä—Å: ${contestTitle}\nüíØ –ë–∞–ª: ${score}`

    if (rank) {
        message += `\nüèÜ –ú—ñ—Å—Ü–µ: ${rank}`
    }

    await sendTelegramNotification(studentId, message)
}

module.exports = {
    initTelegramBot,
    sendTelegramNotification,
    sendBulkTelegramNotifications,
    notifyNewContest,
    notifyParticipationApproval,
    notifyNewResult,
}