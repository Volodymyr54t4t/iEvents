// üîß –í–∏–∑–Ω–∞—á–∞—î–º–æ, –¥–µ –∑–∞—Ä–∞–∑ –∑–∞–ø—É—â–µ–Ω–∏–π —Å–∞–π—Ç ‚Äî –ª–æ–∫–∞–ª—å–Ω–æ —á–∏ –æ–Ω–ª–∞–π–Ω
const BASE_URL =
  window.location.hostname === "localhost"
    ? "http://localhost:3000" // üñ•Ô∏è –õ–æ–∫–∞–ª—å–Ω–∏–π —Å–µ—Ä–≤–µ—Ä
    : "https://ievents-qf5k.onrender.com" // ‚òÅÔ∏è –û–Ω–ª–∞–π–Ω-—Å–µ—Ä–≤–µ—Ä Render

// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
const userId = localStorage.getItem("userId")

if (!userId) {
  window.location.href = "auth.html"
}

// –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–Ω–∫—É—Ä—Å—ñ–≤ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
document.addEventListener("DOMContentLoaded", () => {
  loadMyCompetitions()
  loadMyResults()
})

// –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–Ω–∫—É—Ä—Å—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
async function loadMyCompetitions() {
  try {
    const response = await fetch(`${BASE_URL}/api/competitions/my/${userId}`)
    const data = await response.json()

    if (response.ok) {
      const active = data.competitions.filter((c) => c.status === "–∞–∫—Ç–∏–≤–Ω–∏–π")
      const upcoming = data.competitions.filter((c) => c.status === "–º–∞–π–±—É—Ç–Ω—ñ–π")
      const inactive = data.competitions.filter((c) => c.status === "–Ω–µ–∞–∫—Ç–∏–≤–Ω–∏–π")

      displayCompetitions("activeCompetitions", active, "active")
      displayCompetitions("upcomingCompetitions", upcoming, "upcoming")
      displayCompetitions("inactiveCompetitions", inactive, "inactive")
    } else {
      console.error("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–Ω–∫—É—Ä—Å—ñ–≤:", data.error)
      showError("activeCompetitions")
      showError("upcomingCompetitions")
      showError("inactiveCompetitions")
    }
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞:", error)
    showError("activeCompetitions")
    showError("upcomingCompetitions")
    showError("inactiveCompetitions")
  }
}

// –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∫–æ–Ω–∫—É—Ä—Å—ñ–≤
function displayCompetitions(containerId, competitions, type) {
  const container = document.getElementById(containerId)

  if (competitions.length === 0) {
    let message = ""
    if (type === "active") {
      message = "–ù–∞—Ä–∞–∑—ñ —É –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ–Ω–∫—É—Ä—Å—ñ–≤"
    } else if (type === "upcoming") {
      message = "–ù–∞—Ä–∞–∑—ñ —É –≤–∞—Å –Ω–µ–º–∞—î –º–∞–π–±—É—Ç–Ω—ñ—Ö –∫–æ–Ω–∫—É—Ä—Å—ñ–≤"
    } else {
      message = "–£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î –∑–∞–≤–µ—Ä—à–µ–Ω–∏—Ö –∫–æ–Ω–∫—É—Ä—Å—ñ–≤"
    }

    container.innerHTML = `
      <div class="empty-state">
        <h3>${message}</h3>
        <p>–û—á—ñ–∫—É–π—Ç–µ, –ø–æ–∫–∏ –≤–∏–∫–ª–∞–¥–∞—á –¥–æ–¥–∞—Å—Ç—å –≤–∞—Å –Ω–∞ –∫–æ–Ω–∫—É—Ä—Å</p>
      </div>
    `
    return
  }

  container.innerHTML = competitions
    .map((competition) => {
      const startDate = new Date(competition.start_date)
      const endDate = new Date(competition.end_date)
      const today = new Date()

      let statusText = ""
      let statusClass = ""
      let daysInfo = ""

      if (type === "active") {
        statusText = "–ê–∫—Ç–∏–≤–Ω–∏–π"
        statusClass = "active"
        const daysLeft = Math.ceil((endDate - today) / (1000 * 60 * 60 * 24))
        if (daysLeft > 0) {
          daysInfo = `<div class="days-remaining">–ó–∞–ª–∏—à–∏–ª–æ—Å—å –¥–Ω—ñ–≤: ${daysLeft}</div>`
        }
      } else if (type === "upcoming") {
        statusText = "–ú–∞–π–±—É—Ç–Ω—ñ–π"
        statusClass = "upcoming"
        const daysUntil = Math.ceil((startDate - today) / (1000 * 60 * 60 * 24))
        if (daysUntil > 0) {
          daysInfo = `<div class="days-remaining">–ü–æ—á–Ω–µ—Ç—å—Å—è —á–µ—Ä–µ–∑ ${daysUntil} –¥–Ω—ñ–≤</div>`
        }
      } else {
        statusText = "–ó–∞–≤–µ—Ä—à–µ–Ω–æ"
        statusClass = "inactive"
      }

      return `
        <div class="competition-card ${statusClass}">
          <h3 class="competition-title">${competition.title}</h3>
          <span class="status-badge status-${statusClass}">${statusText}</span>
          ${competition.description ? `<p class="competition-description">${competition.description}</p>` : ""}
          <div class="competition-dates">
            <span>üìÖ –ü–æ—á–∞—Ç–æ–∫: ${startDate.toLocaleDateString("uk-UA")}</span>
            <span>üìÖ –ó–∞–∫—ñ–Ω—á–µ–Ω–Ω—è: ${endDate.toLocaleDateString("uk-UA")}</span>
          </div>
          ${daysInfo}
        </div>
      `
    })
    .join("")
}

// –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏
function showError(containerId) {
  const container = document.getElementById(containerId)
  container.innerHTML = `
    <div class="empty-state">
      <h3>–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è</h3>
      <p>–°–ø—Ä–æ–±—É–π—Ç–µ –æ–Ω–æ–≤–∏—Ç–∏ —Å—Ç–æ—Ä—ñ–Ω–∫—É</p>
    </div>
  `
}

async function loadMyResults() {
  const container = document.getElementById("myResults")
  container.innerHTML = '<div class="loading">–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤...</div>'

  try {
    // Get all competitions the student participates in
    const competitionsResponse = await fetch(`${BASE_URL}/api/competitions/my/${userId}`)
    const competitionsData = await competitionsResponse.json()

    if (!competitionsResponse.ok || competitionsData.competitions.length === 0) {
      container.innerHTML = '<div class="empty-state"><p>–£ –≤–∞—Å –ø–æ–∫–∏ –Ω–µ–º–∞—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤</p></div>'
      return
    }

    // Get results for each competition
    const allResults = []
    for (const competition of competitionsData.competitions) {
      try {
        const resultsResponse = await fetch(`${BASE_URL}/api/results/${competition.id}`)
        const resultsData = await resultsResponse.json()

        if (resultsResponse.ok && resultsData.results.length > 0) {
          // Filter results for current user
          const myResult = resultsData.results.find((r) => r.user_id === Number.parseInt(userId))
          if (myResult) {
            allResults.push({
              ...myResult,
              competition_title: competition.title,
              competition_date: competition.end_date,
            })
          }
        }
      } catch (error) {
        console.error(`–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –¥–ª—è –∫–æ–Ω–∫—É—Ä—Å—É ${competition.id}:`, error)
      }
    }

    if (allResults.length === 0) {
      container.innerHTML = '<div class="empty-state"><p>–£ –≤–∞—Å –ø–æ–∫–∏ –Ω–µ–º–∞—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤</p></div>'
      return
    }

    // Sort by date (newest first)
    allResults.sort((a, b) => new Date(b.competition_date) - new Date(a.competition_date))

    container.innerHTML = `
            <div class="results-grid">
                ${allResults
                  .map((result) => {
                    const date = new Date(result.competition_date).toLocaleDateString("uk-UA")
                    const placeEmoji =
                      result.place === 1 ? "ü•á" : result.place === 2 ? "ü•à" : result.place === 3 ? "ü•â" : "üèÖ"

                    return `
                        <div class="result-card">
                            <div class="result-header">
                                <h3>${result.competition_title}</h3>
                                <span class="result-date">${date}</span>
                            </div>
                            <div class="result-body">
                                ${result.place ? `<div class="result-place">${placeEmoji} –ú—ñ—Å—Ü–µ: ${result.place}</div>` : ""}
                                ${result.score ? `<div class="result-score">üìä –ë–∞–ª–∏: ${result.score}</div>` : ""}
                                <div class="result-achievement">üèÜ ${result.achievement}</div>
                                ${result.notes ? `<div class="result-notes">üìù ${result.notes}</div>` : ""}
                            </div>
                        </div>
                    `
                  })
                  .join("")}
            </div>
        `
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤:", error)
    container.innerHTML = '<div class="empty-state"><p>–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤</p></div>'
  }
}
